use crate :: enums :: ramp_status :: * ; mod ramp_items_to_add ; use ramp_items_to_add :: * ; mod ramp_items_to_update ; use ramp_items_to_update :: * ; mod ramp_coupons_to_add ; use ramp_coupons_to_add :: * ; mod ramp_discounts_to_add ; use ramp_discounts_to_add :: * ; mod ramp_item_tier ; use ramp_item_tier :: * ; mod ramp_status_transition_reason ; use ramp_status_transition_reason :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct Ramp { # [validate (max_length = 50)] pub id : String , # [validate (max_length = 250)] pub description : Option < String > , # [validate (max_length = 50)] pub subscription_id : String , pub effective_from : u64 , # [validate] pub status : RampStatus , pub created_at : u64 , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , pub items_to_remove : Vec < String > , pub coupons_to_remove : Vec < String > , pub discounts_to_remove : Vec < String > , pub deleted : bool , # [validate] pub items_to_add : Vec < RampItemsToAdd > , # [validate] pub items_to_update : Vec < RampItemsToUpdate > , # [validate] pub coupons_to_add : Vec < RampCouponsToAdd > , # [validate] pub discounts_to_add : Vec < RampDiscountsToAdd > , # [validate] pub item_tiers : Vec < RampItemTier > , # [validate] pub status_transition_reason : Option < RampStatusTransitionReason > } impl Ramp { }