use crate :: enums :: payment_voucher_type :: * ; use crate :: enums :: payment_voucher_status :: * ; use crate :: enums :: payment_voucher_gateway :: * ; mod payment_voucher_invoice_payment_voucher ; use payment_voucher_invoice_payment_voucher :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct PaymentVoucher { # [validate (max_length = 40)] pub id : String , # [validate (max_length = 100)] pub id_at_gateway : Option < String > , # [validate] pub payment_voucher_type : PaymentVoucherType , pub expires_at : Option < u64 > , # [validate] pub status : Option < PaymentVoucherStatus > , # [validate (max_length = 50)] pub subscription_id : Option < String > , # [validate (max_length = 3)] pub currency_code : String , # [validate (minimum = 1)] pub amount : Option < i64 > , # [validate (max_length = 50)] pub gateway_account_id : Option < String > , # [validate (max_length = 40)] pub payment_source_id : Option < String > , # [validate] pub gateway : PaymentVoucherGateway , # [validate (max_length = 65000)] pub payload : Option < String > , # [validate (max_length = 100)] pub error_code : Option < String > , # [validate (max_length = 65000)] pub error_text : Option < String > , # [validate (max_length = 65000)] pub url : Option < String > , pub date : Option < u64 > , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , # [validate (max_length = 50)] pub customer_id : String , # [validate] pub linked_invoices : Vec < PaymentVoucherInvoicePaymentVoucher > } impl PaymentVoucher { }