use crate :: enums :: payment_source_type :: * ; use crate :: enums :: payment_source_status :: * ; use crate :: enums :: payment_source_gateway :: * ; mod payment_source_card ; use payment_source_card :: * ; mod payment_source_bank_account ; use payment_source_bank_account :: * ; mod payment_source_cust_voucher_source ; use payment_source_cust_voucher_source :: * ; mod payment_source_billing_address ; use payment_source_billing_address :: * ; mod payment_source_amazon_payment ; use payment_source_amazon_payment :: * ; mod payment_source_upi ; use payment_source_upi :: * ; mod payment_source_paypal ; use payment_source_paypal :: * ; mod payment_source_venmo ; use payment_source_venmo :: * ; mod payment_source_klarna_pay_now ; use payment_source_klarna_pay_now :: * ; mod payment_source_mandate ; use payment_source_mandate :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct PaymentSource { # [validate (max_length = 40)] pub id : String , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , pub created_at : u64 , # [validate (max_length = 50)] pub customer_id : String , # [validate] pub r#type : PaymentSourceType , # [validate (max_length = 200)] pub reference_id : String , # [validate] # [serde (default = "PaymentSource::default_status")] pub status : PaymentSourceStatus , # [validate] pub gateway : PaymentSourceGateway , # [validate (max_length = 50)] pub gateway_account_id : Option < String > , # [validate (max_length = 50)] pub ip_address : Option < String > , # [validate (max_length = 50)] pub issuing_country : Option < String > , pub deleted : bool , # [validate (max_length = 50)] pub business_entity_id : Option < String > , # [validate] pub card : Option < PaymentSourceCard > , # [validate] pub bank_account : Option < PaymentSourceBankAccount > , # [validate] pub boleto : Option < PaymentSourceCustVoucherSource > , # [validate] pub billing_address : Option < PaymentSourceBillingAddress > , # [validate] pub amazon_payment : Option < PaymentSourceAmazonPayment > , # [validate] pub upi : Option < PaymentSourceUpi > , # [validate] pub paypal : Option < PaymentSourcePaypal > , # [validate] pub venmo : Option < PaymentSourceVenmo > , # [validate] pub klarna_pay_now : Option < PaymentSourceKlarnaPayNow > , # [validate] pub mandates : Vec < PaymentSourceMandate > } impl PaymentSource { fn default_status () -> PaymentSourceStatus { PaymentSourceStatus :: Valid } }