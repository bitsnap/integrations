use crate :: enums :: transaction_payment_method :: * ; use crate :: enums :: transaction_gateway :: * ; use crate :: enums :: transaction_type :: * ; use crate :: enums :: transaction_status :: * ; use crate :: enums :: transaction_fraud_flag :: * ; use crate :: enums :: transaction_initiator_type :: * ; use crate :: enums :: transaction_authorization_reason :: * ; mod transaction_invoice_transaction ; use transaction_invoice_transaction :: * ; mod transaction_credit_note_transaction ; use transaction_credit_note_transaction :: * ; mod transaction_txn_refunds_and_reversal ; use transaction_txn_refunds_and_reversal :: * ; mod transaction_linked_payment ; use transaction_linked_payment :: * ; mod transaction_gateway_error_detail ; use transaction_gateway_error_detail :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct Transaction { # [validate (max_length = 40)] pub id : String , # [validate (max_length = 50)] pub customer_id : Option < String > , # [validate (max_length = 50)] pub subscription_id : Option < String > , # [validate (max_length = 50)] pub gateway_account_id : Option < String > , # [validate (max_length = 40)] pub payment_source_id : Option < String > , # [validate] # [serde (default = "Transaction::default_payment_method")] pub payment_method : TransactionPaymentMethod , # [validate (max_length = 100)] pub reference_number : Option < String > , # [validate] pub gateway : TransactionGateway , # [validate] pub r#type : TransactionType , pub date : Option < u64 > , pub settled_at : Option < u64 > , pub exchange_rate : Option < BigDecimal > , # [validate (max_length = 3)] pub currency_code : String , # [validate (minimum = 0)] pub amount : Option < i64 > , # [validate (max_length = 100)] pub id_at_gateway : Option < String > , # [validate] pub status : Option < TransactionStatus > , # [validate] pub fraud_flag : Option < TransactionFraudFlag > , # [validate] pub initiator_type : Option < TransactionInitiatorType > , pub three_d_secure : Option < bool > , # [validate] pub authorization_reason : Option < TransactionAuthorizationReason > , # [validate (max_length = 100)] pub error_code : Option < String > , # [validate (max_length = 65000)] pub error_text : Option < String > , pub voided_at : Option < u64 > , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , # [validate (max_length = 250)] pub fraud_reason : Option < String > , # [validate (max_length = 50)] pub custom_payment_method_id : Option < String > , # [validate (minimum = 0)] pub amount_unused : Option < i64 > , # [validate (max_length = 20)] pub masked_card_number : Option < String > , # [validate (max_length = 40)] pub reference_transaction_id : Option < String > , # [validate (max_length = 40)] pub refunded_txn_id : Option < String > , # [validate (max_length = 40)] pub reference_authorization_id : Option < String > , # [validate (minimum = 0)] pub amount_capturable : Option < i64 > , # [validate (max_length = 40)] pub reversal_transaction_id : Option < String > , pub deleted : bool , # [validate (min_length = 4)] # [validate (max_length = 6)] pub iin : Option < String > , # [validate (min_length = 4)] # [validate (max_length = 4)] pub last4 : Option < String > , # [validate (max_length = 500)] pub merchant_reference_id : Option < String > , # [validate (max_length = 50)] pub business_entity_id : Option < String > , pub payment_method_details : Option < String > , # [validate (max_length = 100)] pub custom_payment_method_name : Option < String > , # [validate] pub linked_invoices : Vec < TransactionInvoiceTransaction > , # [validate] pub linked_credit_notes : Vec < TransactionCreditNoteTransaction > , # [validate] pub linked_refunds : Vec < TransactionTxnRefundsAndReversal > , # [validate] pub linked_payments : Vec < TransactionLinkedPayment > , # [validate] pub error_detail : Option < TransactionGatewayErrorDetail > } impl Transaction { fn default_payment_method () -> TransactionPaymentMethod { TransactionPaymentMethod :: Card } }