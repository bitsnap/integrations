use crate :: enums :: differential_price_status :: * ; mod differential_price_tier ; use differential_price_tier :: * ; mod differential_price_parent_period ; use differential_price_parent_period :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct DifferentialPrice { # [validate (max_length = 100)] pub id : String , # [validate (max_length = 100)] pub item_price_id : String , # [validate (max_length = 100)] pub parent_item_id : String , # [validate (minimum = 0)] pub price : Option < i64 > , # [validate (max_length = 39)] pub price_in_decimal : Option < String > , # [validate] pub status : Option < DifferentialPriceStatus > , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , pub created_at : u64 , pub modified_at : u64 , # [validate (max_length = 3)] pub currency_code : String , # [validate (max_length = 50)] pub business_entity_id : Option < String > , # [validate] pub tiers : Vec < DifferentialPriceTier > , # [validate] pub parent_periods : Vec < DifferentialPriceParentPeriod > } impl DifferentialPrice { }