use crate :: enums :: item_status :: * ; use crate :: enums :: item_type :: * ; use crate :: enums :: item_applicability :: * ; use crate :: enums :: item_usage_calculation :: * ; use crate :: enums :: item_channel :: * ; mod item_applicable_item ; use item_applicable_item :: * ; mod item_bundle_item ; use item_bundle_item :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct Item { # [validate (max_length = 100)] pub id : String , # [validate (max_length = 100)] pub name : String , # [validate (max_length = 100)] pub external_name : Option < String > , # [validate (max_length = 2000)] pub description : Option < String > , # [validate] pub status : Option < ItemStatus > , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , # [validate (max_length = 100)] pub item_family_id : Option < String > , # [validate] pub r#type : ItemType , pub is_shippable : Option < bool > , pub is_giftable : bool , # [validate (max_length = 500)] pub redirect_url : Option < String > , # [serde (default = "Item::default_enabled_for_checkout")] pub enabled_for_checkout : bool , # [serde (default = "Item::default_enabled_in_portal")] pub enabled_in_portal : bool , pub included_in_mrr : Option < bool > , # [validate] # [serde (default = "Item::default_item_applicability")] pub item_applicability : ItemApplicability , # [validate (max_length = 500)] pub gift_claim_redirect_url : Option < String > , # [validate (max_length = 30)] pub unit : Option < String > , pub metered : bool , # [validate] pub usage_calculation : Option < ItemUsageCalculation > , pub archived_at : Option < u64 > , # [validate] pub channel : Option < ItemChannel > , pub metadata : Option < serde_json :: Value > , # [validate (max_length = 50)] pub business_entity_id : Option < String > , # [validate] pub applicable_items : Vec < ItemApplicableItem > , # [validate] pub bundle_items : Vec < ItemBundleItem > } impl Item { fn default_enabled_for_checkout () -> bool { true } fn default_enabled_in_portal () -> bool { true } fn default_item_applicability () -> ItemApplicability { ItemApplicability :: All } }