use crate :: enums :: coupon_discount_type :: * ; use crate :: enums :: coupon_duration_type :: * ; use crate :: enums :: coupon_status :: * ; use crate :: enums :: coupon_apply_on :: * ; use crate :: enums :: coupon_period_unit :: * ; mod coupon_item_constraint ; use coupon_item_constraint :: * ; mod coupon_item_constraint_criteria ; use coupon_item_constraint_criteria :: * ; mod coupon_constraint ; use coupon_constraint :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct Coupon { # [validate (max_length = 100)] pub id : String , # [validate (max_length = 50)] pub name : String , # [validate (max_length = 100)] pub invoice_name : Option < String > , # [validate] # [serde (default = "Coupon::default_discount_type")] pub discount_type : CouponDiscountType , pub discount_percentage : Option < f64 > , # [validate (minimum = 0)] pub discount_amount : Option < i64 > , # [validate (minimum = 1)] pub discount_quantity : Option < i64 > , # [validate (max_length = 3)] pub currency_code : Option < String > , # [validate] # [serde (default = "Coupon::default_duration_type")] pub duration_type : CouponDurationType , pub valid_from : Option < u64 > , pub valid_till : Option < u64 > , # [validate (minimum = 1)] pub max_redemptions : Option < i64 > , # [validate] # [serde (default = "Coupon::default_status")] pub status : Option < CouponStatus > , # [validate] pub apply_on : CouponApplyOn , pub created_at : u64 , pub archived_at : Option < u64 > , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , # [validate (minimum = 1)] pub period : Option < i64 > , # [validate] pub period_unit : Option < CouponPeriodUnit > , # [validate (minimum = 0)] pub redemptions : Option < i64 > , # [validate (max_length = 2000)] pub invoice_notes : Option < String > , pub meta_data : Option < serde_json :: Value > , # [validate] pub item_constraints : Vec < CouponItemConstraint > , # [validate] pub item_constraint_criteria : Vec < CouponItemConstraintCriteria > , # [validate] pub coupon_constraints : Vec < CouponConstraint > } impl Coupon { fn default_discount_type () -> CouponDiscountType { CouponDiscountType :: Percentage } fn default_duration_type () -> CouponDurationType { CouponDurationType :: Forever } fn default_status () -> Option < CouponStatus > { Some (CouponStatus :: Active) } }