use crate :: enums :: invoice_status :: * ; use crate :: enums :: invoice_price_type :: * ; use crate :: enums :: invoice_dunning_status :: * ; use crate :: enums :: invoice_channel :: * ; mod invoice_line_item ; use invoice_line_item :: * ; mod invoice_discount ; use invoice_discount :: * ; mod invoice_line_item_discount ; use invoice_line_item_discount :: * ; mod invoice_tax ; use invoice_tax :: * ; mod invoice_line_item_tax ; use invoice_line_item_tax :: * ; mod invoice_line_item_tier ; use invoice_line_item_tier :: * ; mod invoice_transaction ; use invoice_transaction :: * ; mod invoice_dunning_attempt ; use invoice_dunning_attempt :: * ; mod invoice_applied_credit ; use invoice_applied_credit :: * ; mod invoice_created_credit_note ; use invoice_created_credit_note :: * ; mod invoice_linked_order ; use invoice_linked_order :: * ; mod invoice_note ; use invoice_note :: * ; mod invoice_shipping_address ; use invoice_shipping_address :: * ; mod invoice_statement_descriptor ; use invoice_statement_descriptor :: * ; mod invoice_billing_address ; use invoice_billing_address :: * ; mod invoice_einvoice ; use invoice_einvoice :: * ; mod invoice_linked_tax_withheld ; use invoice_linked_tax_withheld :: * ; mod invoice_site_details_at_creation ; use invoice_site_details_at_creation :: * ; mod invoice_tax_origin ; use invoice_tax_origin :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct Invoice { # [validate (max_length = 50)] pub id : String , # [validate (max_length = 100)] pub po_number : Option < String > , # [validate (max_length = 50)] pub customer_id : String , # [validate (max_length = 50)] pub subscription_id : Option < String > , # [serde (default = "Invoice::default_recurring")] pub recurring : bool , # [validate] pub status : InvoiceStatus , # [validate (max_length = 20)] pub vat_number : Option < String > , # [validate] # [serde (default = "Invoice::default_price_type")] pub price_type : InvoicePriceType , pub date : Option < u64 > , pub due_date : Option < u64 > , pub net_term_days : Option < i64 > , pub exchange_rate : Option < BigDecimal > , # [validate (max_length = 3)] pub currency_code : String , # [validate (minimum = 0)] pub total : Option < i64 > , # [validate (minimum = 0)] pub amount_paid : Option < i64 > , # [validate (minimum = 0)] pub amount_adjusted : Option < i64 > , # [validate (minimum = 0)] pub write_off_amount : Option < i64 > , # [validate (minimum = 0)] pub credits_applied : Option < i64 > , # [validate (minimum = 0)] pub amount_due : Option < i64 > , pub paid_at : Option < u64 > , # [validate] pub dunning_status : Option < InvoiceDunningStatus > , pub next_retry_at : Option < u64 > , pub voided_at : Option < u64 > , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , # [validate (minimum = 0)] pub sub_total : i64 , # [validate (minimum = 0)] pub sub_total_in_local_currency : Option < i64 > , # [validate (minimum = 0)] pub total_in_local_currency : Option < i64 > , # [validate (max_length = 3)] pub local_currency_code : Option < String > , # [validate (minimum = 0)] pub tax : i64 , pub local_currency_exchange_rate : Option < BigDecimal > , pub first_invoice : Option < bool > , # [validate (minimum = 0)] pub new_sales_amount : Option < i64 > , pub has_advance_charges : Option < bool > , # [serde (default = "Invoice::default_term_finalized")] pub term_finalized : bool , pub is_gifted : bool , pub generated_at : Option < u64 > , pub expected_payment_date : Option < u64 > , # [validate (minimum = 0)] pub amount_to_collect : Option < i64 > , # [validate (minimum = 0)] pub round_off_amount : Option < i64 > , # [validate (max_length = 50)] pub payment_owner : Option < String > , # [validate (max_length = 100)] pub void_reason_code : Option < String > , pub deleted : bool , pub tax_category : Option < String > , # [validate (max_length = 10)] pub vat_number_prefix : Option < String > , # [validate] pub channel : Option < InvoiceChannel > , # [validate (max_length = 50)] pub business_entity_id : Option < String > , # [validate] pub line_items : Vec < InvoiceLineItem > , # [validate] pub discounts : Vec < InvoiceDiscount > , # [validate] pub line_item_discounts : Vec < InvoiceLineItemDiscount > , # [validate] pub taxes : Vec < InvoiceTax > , # [validate] pub line_item_taxes : Vec < InvoiceLineItemTax > , # [validate] pub line_item_tiers : Vec < InvoiceLineItemTier > , # [validate] pub linked_payments : Vec < InvoiceTransaction > , # [validate] pub dunning_attempts : Vec < InvoiceDunningAttempt > , # [validate] pub applied_credits : Vec < InvoiceAppliedCredit > , # [validate] pub adjustment_credit_notes : Vec < InvoiceCreatedCreditNote > , # [validate] pub issued_credit_notes : Vec < InvoiceCreatedCreditNote > , # [validate] pub linked_orders : Vec < InvoiceLinkedOrder > , # [validate] pub notes : Vec < InvoiceNote > , # [validate] pub shipping_address : Option < InvoiceShippingAddress > , # [validate] pub statement_descriptor : Option < InvoiceStatementDescriptor > , # [validate] pub billing_address : Option < InvoiceBillingAddress > , # [validate] pub einvoice : Option < InvoiceEinvoice > , # [validate] pub linked_taxes_withheld : Vec < InvoiceLinkedTaxWithheld > , # [validate] pub site_details_at_creation : Option < InvoiceSiteDetailsAtCreation > , # [validate] pub tax_origin : Option < InvoiceTaxOrigin > } impl Invoice { fn default_recurring () -> bool { true } fn default_price_type () -> InvoicePriceType { InvoicePriceType :: TaxExclusive } fn default_term_finalized () -> bool { true } }