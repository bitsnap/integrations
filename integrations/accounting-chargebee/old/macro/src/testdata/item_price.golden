use crate :: enums :: item_price_status :: * ; use crate :: enums :: item_price_proration_type :: * ; use crate :: enums :: item_price_pricing_model :: * ; use crate :: enums :: item_price_period_unit :: * ; use crate :: enums :: item_price_trial_period_unit :: * ; use crate :: enums :: item_price_trial_end_action :: * ; use crate :: enums :: item_price_shipping_period_unit :: * ; use crate :: enums :: item_price_channel :: * ; use crate :: enums :: item_price_usage_accumulation_reset_frequency :: * ; use crate :: enums :: item_price_item_type :: * ; mod item_price_tier ; use item_price_tier :: * ; mod item_price_tax_detail ; use item_price_tax_detail :: * ; mod item_price_tax_providers_field ; use item_price_tax_providers_field :: * ; mod item_price_accounting_detail ; use item_price_accounting_detail :: * ; # [derive (Default , Debug , Clone , Serialize , Deserialize , Validate)] # [serde (rename_all = "snake_case")] pub struct ItemPrice { # [validate (max_length = 100)] pub id : String , # [validate (max_length = 100)] pub name : String , # [validate (max_length = 100)] pub item_family_id : Option < String > , # [validate (max_length = 100)] pub item_id : Option < String > , # [validate (max_length = 2000)] pub description : Option < String > , # [validate] pub status : Option < ItemPriceStatus > , # [validate (max_length = 100)] pub external_name : Option < String > , # [validate (max_length = 100)] pub price_variant_id : Option < String > , # [validate] pub proration_type : Option < ItemPriceProrationType > , # [validate] # [serde (default = "ItemPrice::default_pricing_model")] pub pricing_model : ItemPricePricingModel , # [validate (minimum = 0)] pub price : Option < i64 > , # [validate (max_length = 39)] pub price_in_decimal : Option < String > , # [validate (minimum = 1)] pub period : Option < i64 > , # [validate (max_length = 3)] pub currency_code : String , # [validate] pub period_unit : Option < ItemPricePeriodUnit > , # [validate (minimum = 0)] pub trial_period : Option < i64 > , # [validate] pub trial_period_unit : Option < ItemPriceTrialPeriodUnit > , # [validate] pub trial_end_action : Option < ItemPriceTrialEndAction > , # [validate (minimum = 1)] pub shipping_period : Option < i64 > , # [validate] pub shipping_period_unit : Option < ItemPriceShippingPeriodUnit > , # [validate (minimum = 1)] pub billing_cycles : Option < i64 > , # [validate (minimum = 0)] pub free_quantity : i64 , # [validate (max_length = 33)] pub free_quantity_in_decimal : Option < String > , # [validate] pub channel : Option < ItemPriceChannel > , pub resource_version : Option < i64 > , pub updated_at : Option < u64 > , pub created_at : u64 , # [validate] pub usage_accumulation_reset_frequency : Option < ItemPriceUsageAccumulationResetFrequency > , pub archived_at : Option < u64 > , # [validate (max_length = 2000)] pub invoice_notes : Option < String > , # [serde (default = "ItemPrice::default_is_taxable")] pub is_taxable : Option < bool > , pub metadata : Option < serde_json :: Value > , # [validate] pub item_type : Option < ItemPriceItemType > , pub show_description_in_invoices : Option < bool > , pub show_description_in_quotes : Option < bool > , # [validate (max_length = 50)] pub business_entity_id : Option < String > , # [validate] pub tiers : Vec < ItemPriceTier > , # [validate] pub tax_detail : Option < ItemPriceTaxDetail > , # [validate] pub tax_providers_fields : Vec < ItemPriceTaxProvidersField > , # [validate] pub accounting_detail : Option < ItemPriceAccountingDetail > } impl ItemPrice { fn default_pricing_model () -> ItemPricePricingModel { ItemPricePricingModel :: FlatFee } fn default_is_taxable () -> Option < bool > { Some (true) } }